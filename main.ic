#include array.ic
#define SERVO_MAX_VALUE 3900
#define SERVO_MIN_VALUE 1100
#define SERVO_OUT servo0//which output is used by servo
#define STEPS 27//how many steps between MIN and MAX value servo should do
#define FRONT_SENSOR_INPUT 4
#define LEFT_SENSOR_INPUT 3
#define RIGHT_SENSOR_INPUT 2

int servoValues[STEPS];//array used to store servo step values
int rngs[STEPS];//array used to store ranges of sensor

int rev = 0;//spin servo in reverse direction
int servoValue = STEPS / 2;

int border_left = STEPS / 3 - 1;//any servo value means servo in virtual "left" sector
int border_middle = STEPS / 3 * 2 - 1;//and so on
int border_right = STEPS - 1;

int left=0;//average values for left,
int right=0;//right
int middle=0;//and middle sector

int wallLeft = 0;
int wallRight = 0;

int trig = 50;//'too close to obstacle' trigger

void fillArrayWithServoValues(int arr[])//initialize array function
{ 
    int i;
    for( i = 0; i < STEPS; i = i + 1 )//i++ is way too slower :D
      {
        arr[i] = SERVO_MIN_VALUE + ( (SERVO_MAX_VALUE - SERVO_MIN_VALUE) / STEPS) * i;
    }
}

void printDebug()
{
    printf("i:%d,L:%d,M:%d,R:%d\n",servoValue,left,middle,right);
}

void makeServoStep()
{
    if( servoValue <= STEPS - 1 & !rev ) { servoValue = servoValue + 1; }
    if( servoValue == STEPS - 1 & !rev ) { rev = 1; }
    if( servoValue >= 0 & rev ) { servoValue = servoValue - 1; }
    if( servoValue == 0 & rev ) { rev = 0; }
    
    SERVO_OUT = servoValues[servoValue];
}

void calculateAverages()
{
    if( servoValue == border_left   & !rev ) { left   = array_averageFromTo(rngs, 0, border_left); printDebug();}
    if( servoValue == border_middle & !rev ) { middle = array_averageFromTo(rngs, border_left   + 1, border_middle); printDebug();}
    if( servoValue == border_right  & !rev ) { right  = array_averageFromTo(rngs, border_middle + 1, border_right); printDebug();}
    
    if( servoValue == 0 & rev )                { left   = array_averageFromTo(rngs, 0, border_left); printDebug();}
    if( servoValue == border_left + 1 & rev )  { middle = array_averageFromTo(rngs, border_left   + 1, border_middle); printDebug();}
    if( servoValue == border_middle +1 & rev ) { right  = array_averageFromTo(rngs, border_middle + 1, border_right); printDebug();}
}

void fixCourse()
{
    int leftDist = analog(LEFT_SENSOR_INPUT);
    int rightDist = analog(RIGHT_SENSOR_INPUT);
    
    if( leftDist )
      {
        wallLeft = 10 - leftDist;
        wallRight = wallLeft / 5;
    }
    else if ( rightDist )
      {
        wallRight = 10 - rightDist;
        wallLeft = wallRight / 5;
    }
    else
    {
        wallLeft = wallRight = 0;
    }
}

void wallAvoidance() {
    
    motor(0, 100 - ( 7/4 * right + middle * 1/2 + 5 * wallLeft ) );//fractions used to avoid float casting because float nubers does not natively
    motor(1, 100 - ( 7/4 * left  + middle * 1/2 + 5 * wallRight ) );//supported by MC68HC11 controller, and using them will make serious impact on perfomance
    
    if ( middle > trig )
      {
        if( right > left )
          {
            motor(1,80);
            motor(0,-70);
        }
        else
          {
            motor(1,-70);
            motor(0,80);
        }
    }
}

void main()
{
    init_expbd_servos(1);
    SERVO_OUT = (SERVO_MAX_VALUE + SERVO_MIN_VALUE) / 2;//put servo in middle position
    
    fillArrayWithServoValues(servoValues);
    
    printf("Press start     button to begin\n");
    
    start_press();//wait for start button
    
    while(1)
      {
        //printf("%d     %d\n",servoValues[servoValue], servoValue);
        makeServoStep();
        
        rngs[servoValue] = analog(FRONT_SENSOR_INPUT);//read sensor
        
        fixCourse();
        calculateAverages();
        wallAvoidance();
        
    }
}

